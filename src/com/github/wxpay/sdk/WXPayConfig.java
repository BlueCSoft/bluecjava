package com.github.wxpay.sdk;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.HashMap;

public class WXPayConfig {

	private byte[] certData;
	private String AppID = "";
	private String MchID = "";
	private String Key = "";
	private String certPath = "";

	public final static String IP = "8.8.8.8";
	
	public WXPayConfig(HashMap<String, String> vparams) {
		AppID = vparams.get("AppID").toString();
		MchID = vparams.get("MchID").toString();
		Key = vparams.get("Key").toString();
		certPath = vparams.get("certPath").toString();
		getCert();
	}

	private void getCert() {
		try {
			File file = new File(certPath);
			InputStream certStream = new FileInputStream(file);
			this.certData = new byte[(int) file.length()];
			certStream.read(this.certData);
			certStream.close();
		} catch (Exception ex) {

		}
	}

	/**
	 * 获取 App ID
	 *
	 * @return App ID
	 */
	public String getAppID() {
		return AppID;
	}

	/**
	 * 获取 Mch ID
	 *
	 * @return Mch ID
	 */
	public String getMchID() {
		return MchID;
	}

	/**
	 * 获取 API 密钥
	 *
	 * @return API密钥
	 */
	public String getKey() {
		return Key;
	}

	/**
	 * 获取商户证书内容
	 *
	 * @return 商户证书内容
	 */
	public InputStream getCertStream() {
		ByteArrayInputStream certBis;
		certBis = new ByteArrayInputStream(this.certData);
		return certBis;
	}

	/**
	 * HTTP(S) 连接超时时间，单位毫秒
	 *
	 * @return
	 */
	public int getHttpConnectTimeoutMs() {
		return 6 * 1000;
	}

	/**
	 * HTTP(S) 读数据超时时间，单位毫秒
	 *
	 * @return
	 */
	public int getHttpReadTimeoutMs() {
		return 8 * 1000;
	}

	/**
	 * 获取WXPayDomain, 用于多域名容灾自动切换
	 * 
	 * @return
	 */
	public IWXPayDomain getWXPayDomain() {
		return WXPayDomainSimpleImpl.instance();
	};

	/**
	 * 是否自动上报。 若要关闭自动上报，子类中实现该函数返回 false 即可。
	 *
	 * @return
	 */
	public boolean shouldAutoReport() {
		return true;
	}

	/**
	 * 进行健康上报的线程的数量
	 *
	 * @return
	 */
	public int getReportWorkerNum() {
		return 6;
	}

	/**
	 * 健康上报缓存消息的最大数量。会有线程去独立上报 粗略计算：加入一条消息200B，10000消息占用空间 2000 KB，约为2MB，可以接受
	 *
	 * @return
	 */
	public int getReportQueueMaxSize() {
		return 10000;
	}

	/**
	 * 批量上报，一次最多上报多个数据
	 *
	 * @return
	 */
	public int getReportBatchSize() {
		return 10;
	}

}

